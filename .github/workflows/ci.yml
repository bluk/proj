name: Rust CI

permissions:
  contents: read

on:
  push:

  pull_request:

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Rust Version
        run: rustc --version
      - name: Install sqlite (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib
      - name: Set variables for sqlite (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_PATH
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV
      - name: Run cargo build (--all-features)
        run: cargo build --release --all-features
  test:
    name: Test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Rust Version
        run: rustc --version
      - name: Install sqlite (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib
      - name: Set variables for sqlite (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_PATH
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV
      - name: Run cargo check (--all-features)
        run: cargo check --all-features
      - name: Run cargo test (default)
        run: cargo test
      - name: Run cargo test (--all-features)
        run: cargo test --all-features
  rustfmt:
    name: Format
    strategy:
      matrix:
        os:
          - ubuntu-latest
        rust:
          - stable
          - nightly
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt
      - name: Rust Version
        run: rustc --version
      - run: cargo fmt --all -- --check
  clippy:
    name: Clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
        rust:
          - stable
          - nightly
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
      - name: Install sqlite (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib
      - name: Set variables for sqlite (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_PATH
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV
      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
